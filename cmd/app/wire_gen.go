// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/config"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/controller"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/driver"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/health"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/middleware"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/repository"
	"gitlab.elasticpath.com/commerce-cloud/personal-data.svc/internal/service"
)

// Injectors from inject_main.go:

func setupApp() (*internal.App, error) {
	env, err := config.ProvideEnv()
	if err != nil {
		return nil, err
	}
	mongoConfig := config.ProvideMongoConfig(env)
	loggerConfig := config.ProvideLoggingConfig(env)
	logger := internal.ProvideLogger(loggerConfig)
	iHealth := health.ProvideHealth()
	client, err := mongo.ProvideClient(mongoConfig, logger, iHealth)
	if err != nil {
		return nil, err
	}
	database := mongo.ProvideDatabase(client)
	repository := logentries.ProvideRepository(mongoConfig, database)
	serviceConfig, err := config.ProvideServiceConfig(env)
	if err != nil {
		return nil, err
	}
	logEntriesService := service.ProvideLogEntriesService(repository, serviceConfig)
	controllerConfig := config.ProvideControllerConfig(env)
	logEntriesController := controller.ProvideLogEntriesController(logEntriesService, controllerConfig)
	healthController := controller.ProvideHealthController(iHealth, client)
	serverConfig := config.ProvideServerConfig(env)
	middlewareConfig := config.ProvideMiddlewareConfig(env)
	middlewareMiddleware := middleware.ProvideMiddleware(middlewareConfig, client)
	server := internal.ProvideServer(logEntriesController, healthController, serverConfig, middlewareMiddleware)
	app := internal.ProvideApp(server, client)
	return app, nil
}

// inject_main.go:

var providers = wire.NewSet(service.ProvideLogEntriesService, controller.ProvideLogEntriesController, controller.ProvideHealthController, middleware.ProvideMiddleware, mongo.ProvideDatabase, mongo.ProvideClient, logentries.ProvideRepository)

var appProviders = wire.NewSet(config.Providers, health.ProvideHealth, internal.ProvideLogger, internal.ProvideServer, internal.ProvideApp, providers)
